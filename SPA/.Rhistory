Land_6152_SNPs_AB <- read.delim("~/Desktop/Landrace_Analysis/Worked_Datasets/Land_6152_SNPs_AB.txt", stringsAsFactors=FALSE)
View(Land_6152_SNPs_AB)
geno.df <- Land_6152_SNPs_AB
for(i in (1:ncol(geno.df))){
geno.df[,i]<-replace(geno.df[,i],geno.df[,i]=="AA",1)
geno.df[,i]<-replace(geno.df[,i],geno.df[,i]=="BB",2)
geno.df[,i]<-replace(geno.df[,i],geno.df[,i]=="AB",NA)
geno.df[,i]<-replace(geno.df[,i],geno.df[,i]=="BA",NA)
}
View(geno.df)
for(i in (1:ncol(geno.df))){
if((length(which(geno.df[,i] == '2'))) > (length(which(geno.df[,i] == '1')))){
geno.df[,i] <- replace(geno.df[,i], geno.df[,i] == '2', 0)
geno.df[,i] <- replace(geno.df[,i], geno.df[,i] == '1', 2)
}
else{
geno.df[,i] <- replace(geno.df[,i], geno.df[,i] == '2', 2)
geno.df[,i] <- replace(geno.df[,i], geno.df[,i] == '1', 0)
}
}
spa_geno.df <- geno.df
Sample_spa_geno.df <- spa_geno.df$X
SNP_spa_geno.df <- colnames(spa_geno.df)
SNP_spa_geno.df
spa_geno.df <- spa_geno.df[,-1]
spa_geno.df <- spa_geno.df[, colSums(spa_geno.df == 0,na.rm=T) > 0  & colSums(spa_geno.df == 2,na.rm=T) > 0  ]
write.table(spa_geno.df, sep = " ", file = "spa_geno_2.df", quote = FALSE, row.names = FALSE, col.names = FALSE)
getwd()
View(spa_geno.df)
spa_geno.df <- spa_geno.df[, colSums(spa_geno.df == 0,na.rm=T) > 0  & colSums(spa_geno.df == 2,na.rm=T) > 0  ]
spa_geno.df <- spa_geno.df[, colSums(spa_geno.df == 0,na.rm=T) > 0]
View(spa_geno.df)
spa_loc <- read.delim("~/Desktop/Landrace_Analysis/SPA/spa_loc", stringsAsFactors=FALSE)
View(spa_loc)
names(spa_loc) <- cols
cols <- c("Family.ID", "Individual.ID", "Paternal.ID", "Maternal.ID", "Sex", "Phenotype", "loc.dim1", "loc.dim2")
names(spa_loc) <- cols
plot(x = spa_loc$loc.dim1, y = spa_loc$loc.dim2)
spa_loc <- read.delim("~/Desktop/Landrace_Analysis/SPA/spa_loc", header=FALSE, stringsAsFactors=FALSE)
View(spa_loc)
names(spa_loc) <- cols
plot(x = spa_loc$loc.dim1, y = spa_loc$loc.dim2)
plot(x = spa_loc$Family.ID, y = spa_loc$loc.dim1)
spa_model <- read.delim("~/Desktop/Landrace_Analysis/SPA/spa_model", header=FALSE, stringsAsFactors=FALSE)
View(spa_model)
names(spa_model) <- cols2
cols2 <- c("Chromosome", "SNP.ID", "Genetic.distance","BP_Pos","Minor_Allele", "Major_Allele","Dim.1","Dim.2","Dim.3","SPA_Score")
names(spa_model) <- cols2
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score)
spa_model$SNP.ID <- 1:nrows(spa_model)
spa_model$SNP.ID <- 1:nrow(spa_model)
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score)
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score, main = "SPA values", xlab = "SNP", ylab = "SPA score", col = ifelse(test = spa_model$SPA_Score > ((range(spa_model$SPA_Score)) * .95), yes = "red", no = "blue")
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score, main = "SPA values", xlab = "SNP", ylab = "SPA score", col = ifelse(test = spa_model$SPA_Score > ((range(spa_model$SPA_Score)) * .95), yes = "red", no = "blue"))
range(spa_model$SPA_Score)
range(spa_model$SPA_Score) * .95
as.data.frame(range(spa_model$SPA_Score) * .95)
SPA_range <- as.data.frame(range(spa_model$SPA_Score) * .95)
SPA_range[2,]
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score, main = "SPA values", xlab = "SNP", ylab = "SPA score", col = ifelse(test = spa_model$SPA_Score > SPA_range[2,], yes = "red", no = "blue"))
plot(x = spa_model$SNP.ID, y = log(spa_model$SPA_Score), main = "SPA values", xlab = "SNP", ylab = "SPA score", col = ifelse(test = spa_model$SPA_Score > SPA_range[2,], yes = "red", no = "blue"))
SPA_range <- as.data.frame(range(spa_model$SPA_Score) * .95)
plot(x = spa_model$SNP.ID, y = spa_model$SPA_Score, main = "SPA values", xlab = "SNP", ylab = "SPA score", col = ifelse(test = spa_model$SPA_Score > SPA_range[2,], yes = "red", no = "blue"), log = "y")
table(spa_model$SPA_Score > SPA_range[2,])
subset(spa_model, spa_model$SPA_Score > SPA_range[2,])
high_SPA <- subset(spa_model, spa_model$SPA_Score > SPA_range[2,])
View(high_SPA)
SNPs <- spa_geno.df[0,]
View(SNPs)
t(SNPs)
SNPs <- t(SNPs)
SNPs <- spa_geno.df[0,]
View(SNPs)
as.data.frame(spa_geno.df[0,])
SNPs <- as.data.frame(spa_geno.df[0,])
View(SNPs)
t(SNPs)
SNP.Names <- t(SNPs)
View(SNP.Names)
SNP.Names <- c(SNPs[294], SNPs[642], SNPs[1136], SNPs[1841], SNPs[1906], SNPs[2545], SNPs[3400], SNPs[5457], SNPs[5646], SNPs[5936])
View(SNP.Names)
high_SPA$SNP.ID <- SNPs[294]
high_SPA$SNP.ID <- SNPs[[294]]
high_SPA$SNP.ID <- SNPs[ [294] ]
SNPs[[294]]
as.character(SNPs[[294]])
t(SNP.Names)
as.data.frame(t(SNP.Names))
SNP.Names <- as.data.frame(t(SNP.Names))
View(SNP.Names)
colnames(SNP.Names)
SNP.Names <- colnames(SNP.Names)
SNP.Names
as.data.frame(SNP.Names)
SNP.Names<- as.data.frame(SNP.Names)
View(SNP.Names)
high_SPA$SNP.Names <- SNP.Names
View(high_SPA)
high_SPA<- high_SPA[,c(11,1:10)]
ncol(high_SPA$SNP.Names) <- "SNP"
colnames(high_SPA$SNP.Names) <- "SNP"
colnames(high_SPA)[colnames(high_SPA)=="SNP.Names.SNP.Names"] <- "SNP.ID"
high_SPA <- high_SPA[,c(1,3,11,6,7,2,8,9,10)]
View(high_SPA)
high_SPA$SNPs <- high_SPA[,1]
View(high_SPA)
high_SPA <- high_SPA[,c(1:9)]
View(high_SPA)
View(SNP.Names)
catch <- cbind(high_SPA, SNP.Names)
View(catch)
high_SPA <- catch[,c(10,2:9)]
View(high_SPA)
rm("catch")
GeneticMap_iSelect_9k <- read.delim("~/Desktop/Landrace_Analysis/Worked_Datasets/GeneticMap_iSelect_9k.txt", stringsAsFactors=FALSE)
View(GeneticMap_iSelect_9k)
GeneticMap <- GeneticMap_iSelect_9k
View(GeneticMap)
GeneticMap <- GeneticMap[,c("SNP", "cm", "Chromosome")]
outlier_SPA <- merge(x = high_SPA, y = GeneticMap, by.x = "SNP.Names", by.y = "SNP")
View(outlier_SPA)
colnames(outlier_SPA)[colnames(outlier_SPA)=="chromosome.y"] <- "Chr"
colnames(outlier_SPA)[colnames(outlier_SPA)=="Chromosome.y"] <- "Chr"
outlier_SPA <- outlier_SPA[,c(2,1,3,11,10,4,5,7,8,9)]
View(outlier_SPA)
EW_basicstats <- read.csv("~/Desktop/Landrace_Analysis/Worked_Datasets/EW_basicstats.csv", stringsAsFactors=FALSE)
View(EW_basicstats)
EW_Fst <- EW_basicstats[,c("X","Fst")]
SNP_by_chro <- GeneticMap_iSelect_9k[,c("SNP","cm","Chromosome")]
SNP_FST.df <- merge(x = EW_Fst, y = SNP_by_chro, by.x = "X", by.y = "SNP")
Outliers <- subset(SNP_FST.df, Fst > .5)
tgeno <- read.csv("~/Desktop/Landrace_Analysis/Worked_Datasets/tgeno.csv", stringsAsFactors=FALSE)
View(tgeno)
outliers.in.samples <- merge(x = Outliers, y = tgeno, by.x = "X", by.y = "SNP.ID")
chro.2.inversion <- subset(Outliers, Chromosome == 2)
View(chro.2.inversion)
View(EW_Fst)
outlier_SPA <- merge(x = outlier_SPA, y = EW_Fst, by.x = "SNP.Names", by.y = "X")
View(outlier_SPA)
outlier_SPA <- outlier_SPA[,c(1:3,11,4:10)]
View(tgeno)
`803_landraces_KML` <- read.csv("~/Desktop/Landrace_Analysis/Worked_Datasets/803_landraces_KML.csv", stringsAsFactors=FALSE)
View(`803_landraces_KML`)
View(geno.df)
Zhou_outlierSPA <- read.table("~/Desktop/Landrace_Analysis/SPA/Zhou_outlierSPA.txt", quote="\"", comment.char="", stringsAsFactors=FALSE)
View(Zhou_outlierSPA)
Zhou_outlierSPA <- read.table("~/Desktop/Landrace_Analysis/SPA/Zhou_outlierSPA.txt", quote="\"", comment.char="", stringsAsFactors=FALSE)
View(Zhou_outlierSPA)
Zhou_outlierSPA <- merge( x = Zhou_outlierSPA, y = outlier_SPA, by.x = "V1", by.y = "SNP.Names")
Zhou_outlierSPA$Z_cm <- 72.99
View(Zhou_outlierSPA)
Zhou_outlierSPA <- Zhou_outlierSPA[, c(1:6, 12, 7:11)]
View(Zhou_outlierSPA)
plot(x = outlier_SPA$Fst, y = outlier_SPA$SPA_Score)
loc.df <- `803_landraces_KML`
View(loc.df)
View(geno.df)
geno.df$side <- 0
library("maps")
library("maptools")
data("wrld_simpl")
plot(wrld_simpl,xlim=c(-30,140),ylim=c(-8,64),col="lemonchiffon2",main="Barley Landraces")
box()
View(geno.df)
View(Zhou_outlierSPA)
geno.spa <- geno.df
View(Zhou_outlierSPA)
geno.spa$side <- ifelse(test = geno.spa$X11_10685 == 0, yes = "0", no = "2")
geno.spa <- geno.spa[,c("X","side")]
View(geno.spa)
loc.spa <- merge(x = loc.df, y = geno.spa, by.x = "Accession.ID", by.y = "X")
View(loc.spa)
plot(wrld_simpl,xlim=c(-30,140),ylim=c(-8,64),col="lemonchiffon2",main="Distribution of Outlier Chromosome 2 SNP")
box()
with(loc.spa, points(x = Longitude,y = Latitude, cex = .75,
col = ifelse(side == "0", "red","blue")))
abline(v=48) #Zagaros
legend("bottomleft", bg = "transparent",
c("Zagros Mountains","Minor Allele", "Major Allele"),
col=c("black","blue","red"), lwd=1, lty=c(1,NA,NA),
pch = c(NA,21,21),cex = 0.75)
View(geno.spa)
View(spa_loc)
View(spa_loc)
View(`803_landraces_KML`)
?persp
persp(x = outlier_SPA$Dim.1, y = outlier_SPA$Dim.2, z = outlier_SPA$Dim.3)
View(geno.spa)
View(loc.spa)
View(spa_loc)
plot(spa_loc$loc.dim1~ spa_loc$loc.dim2)
myfile.geno <- sample(x = c(0:2), replace = TRUE, size = 20)
myfile.geno <- matrix(ddata = myfile.geno, nrow = 10, ncol = 2)
myfile.geno
View(myfile.geno)
myfile.geno <- matrix(ddata = myfile.geno, nrow = 4, ncol = 5)
myfile.geno <- matrix(data = myfile.geno, nrow = 10, ncol = 2)
myfile.geno
example_loc <- read.csv("~/Desktop/Landrace_Analysis/example_loc.csv", stringsAsFactors=FALSE)
View(example_loc)
View(myfile.geno)
SNP_head <- c("SNP1", "SNP2")
myfile.geno <- colnames(myfile.geno(SNP_head))
myfile.geno <- colnames(SNP_head)
myfile.geno <- sample(x = c(0:2), replace = TRUE, size = 20)
myfile.geno <- matrix(data = myfile.geno, nrow = 10, ncol = 2)
SNP_head <- c("SNP1", "SNP2")
myfcolnames(myfile.geno) <- SNP_head
colnames(myfile.geno) <- SNP_head
write.csv(x = myfile.geno, file = "example_geno", quote = FALSE, row.names = FALSE, col.names = FALSE)
write.csv(x = myfile.geno, file = "example_geno", quote = FALSE, row.names = FALSE)
write.csv(x = example_loc, file = "example_loc", quote = FLASE, row.names = FALSE)
write.csv(x = example_loc, file = "example_loc", quote = FALSE, row.names = FALSE)
example_loc <- read.csv("~/Desktop/Landrace_Analysis/example_loc.csv", stringsAsFactors=FALSE)
View(example_loc)
example_loc <- read.csv("~/Desktop/Landrace_Analysis/example_loc.csv", header=FALSE, stringsAsFactors=FALSE)
View(example_loc)
write.csv(x = example_loc, file = "example_loc", quote = FALSE, row.names = FALSE)
write.csv(x = example_loc, file = "example_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
write.txt(x = example_loc, file = "example_loc", quote = FALSE, row.names = FALSE)
write.table(x = example_loc, file = "example_loc", quote = FALSE, row.names = FALSE)
View(`803_landraces_KML`)
data_loc <- `803_landraces_KML`
data_loc <- data_loc[,c(1:4)]
data_loc$v1 <- 1:nrow(data_loc$Accession.ID)
data_loc$v1 <- 1:nrow(data_loc)
View(data_loc)
data_loc$v3 <- 0
data_loc$v5 <- 0
data_loc$v6 <- 0
data_loc<- data_loc[,c("v1","Accession.ID","v3", "v4", "v5", "v6", "Latitude","Longitude")]
data_loc$v3 <- 0
data_loc$v4 <- 0
data_loc$v5 <- 0
data_loc$v6 <- 0
data_loc<- data_loc[ ,c("v1","Accession.ID","v3", "v4", "v5", "v6", "Latitude","Longitude")]
write.table(x = data_loc, file = "data_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
data_loc<- data_loc[ ,c("v1","Accession.ID","v3", "v4", "v5", "v6", "Longitude","Latitude")]
write.table(x = data_loc, file = "data_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
data_loc<- data_loc[ ,c("v1","Accession.ID","v3", "v4", "v5", "v6", "Latitude","Longitude")]
data_loc$v1 <- ifelse(test = data_loc$Longitude > 48, yes = 1, no = 0)
write.table(x = data_loc, file = "data_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
data_loc<- data_loc[ ,c("Accession.ID","v1","v3", "v4", "v5", "v6", "Latitude","Longitude")]
data_loc$Accession.ID <- 1:nrow(data_loc)
write.table(x = data_loc, file = "data_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
data_loc<- data_loc[ ,c("Accession.ID","v1","v3", "v4", "v5", "v6", "Longitude","Latitude")]
write.table(x = data_loc, file = "data_loc", quote = FALSE, row.names = FALSE, col.names = FALSE)
data_model <- read.delim("~/Desktop/Landrace_Analysis/SPA/Run_SPA/data_model", header=FALSE, stringsAsFactors=FALSE)
View(data_model)
str(data_model)
range(data_model$V10)
View(spa_loc)
spa_loc$log_dim1 <- 10^(spa_loc$loc.dim1)
spa_loc$log_dim2 <- 10^(spa_loc$loc.dim2)
plot(x = spa_loc$log_dim1, y = spa_loc$log_dim2)
spa_loc <- spa_loc[,c(1:8)]
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?map
map <- get_map(location = c(long = 51, lat = 35), zoom = "auto", scale = "auto",
maptype = "terrain", messaging = FALSE, urlonly = FALSE,
filename = "ggmap_spa", crop = TRUE,
color = c("color", "bw"),
source = "google")
map
map
ggmap(map)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = "auto", scale = "auto",
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 5, scale = "auto",
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 5, scale = 5,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 5, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
map2
ggplot(map2)
ggmap(map2)
ggmap(map2, fullpage = TRUE) +
geom_point(aes(x = loc.dim1, y = loc.dim2), data = spa_loc, size = 3, colour = "black") +
geom_path(aes(x = loc.dim1, y = loc.dim2), data = spa_loc)
View(`803_landraces_KML`)
ggmap(map2, fullpage = TRUE) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, size = 3, colour = "black") +
geom_path(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 5, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2, fullpage = TRUE) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, size = 3, colour = "black")
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 1, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2, fullpage = TRUE) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, size = 3, colour = "black")
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 1, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2, fullpage = TRUE)
ggmap(map2)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 5, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = "terrain", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2)
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, size = 3, colour = "black")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = c("terrain", "satellite"), language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = "satellite", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
map <- get_map()
ggmap(map)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = "satellite", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = c("color", "bw"))
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = "satellite", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = "color")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
map2 <- get_googlemap(center = c(lon = 51, lat = 35),
zoom = 3, scale = 2,
maptype = "hybrid", language = "en-EN",
sensor = FALSE, messaging = FALSE, urlonly = FALSE,
filename = "ggmap_google_spa", color = "color")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`)
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, color = "#FF9999")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, color = "#FF9999")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, color = "#CC0000")
ggmap(map2) +
geom_point(aes(x = loc.dim1, y = loc.dim2), data = spa_loc)
ggmap(map2) +
geom_point(aes(x = loc.dim1, y = loc.dim2), data = spa_loc, color = "red")
ggmap(map2) +
geom_point(aes(x = Longitude, y = Latitude), data = `803_landraces_KML`, color = "#CC0000")
install.packages("plot3D")
library("plot3D", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
args(slice3D)
par(mfrow = c(1,2))
x <- y <- z <- seq(-4, 4, by = 0.2)
M <- mesh(x, y, z)
R <- with(M, sqrt(x^2 + y^2 + z^2))
p <- sin(2*R)/(R+1e-3)
slice3D(x, y ,z, colvar = p,
xs = 0, ys = c(-4, 0, 4), zs = NULL)
isosurf3D(x, y, z, colvar = p, level = 0, color = "red")
par(mfrow = c(1,2))
x <- y <- z <- seq(-4, 4, by = 0.2)
M <- mesh(x, y, z)
R <- with(M, sqrt(x^2 + y^2 + z^2))
p <- sin(2*R)/(R+1e-3)
slice3D(x, y ,z, colvar = p,
xs = 0, ys = c(-4, 0, 4), zs = NULL)
par(mfrow = c(1,1))
x <- y <- z <- seq(-4, 4, by = 0.2)
M <- mesh(x, y, z)
R <- with(M, sqrt(x^2 + y^2 + z^2))
p <- sin(2*R)/(R+1e-3)
slice3D(x, y ,z, colvar = p,
xs = 0, ys = c(-4, 0, 4), zs = NULL)
slice3D(x = outlier_SPA$Dim.1, y = outlier_SPA$Dim.2, z = outlier_SPA$Dim.3)
args(slice3D)
slice3D(x = outlier_SPA$Dim.1, y = outlier_SPA$Dim.2, z = outlier_SPA$Dim.3, colvar = p)
function (x, y, z, colvar, ..., phi = 40, theta = 40, xs = min(x),
ys = max(y), zs = min(z), col = jet.col(100), NAcol = "white",
border = NA, facets = TRUE, colkey = NULL, panel.first = NULL,
clim = NULL, clab = NULL, bty = "b", lighting = FALSE, shade = NA,
ltheta = -135, lphi = 0, add = FALSE, plot = TRUE)
)
slice3D(x, y, z, colvar, ..., phi = 40, theta = 40, xs = min(x),
ys = max(y), zs = min(z), col = jet.col(100), NAcol = "white",
border = NA, facets = TRUE, colkey = NULL, panel.first = NULL,
clim = NULL, clab = NULL, bty = "b", lighting = FALSE, shade = NA,
ltheta = -135, lphi = 0, add = FALSE, plot = TRUE)
x <- outlier_SPA$Dim.1
y <- outlier_SPA$Dim.2
z <- outlier_SPA$Dim.3
M <- mesh(x, y, z)
colvar = z
slice3D(x, y, z, colvar = z)
x <- outlier_SPA$Dim.1
y <- outlier_SPA$Dim.2
z <- outlier_SPA$Dim.3
M <- mesh(x, y, z)
slice3D(x, y, z, colvar = z,
xs = min(x), ys = min(y), zs = min(z))
x <- outlier_SPA$Dim.1
y <- outlier_SPA$Dim.2
z <- outlier_SPA$Dim.3
M <- mesh(x, y, z)
slice3D(x, y, z, colvar = M,
xs = min(x), ys = min(y), zs = min(z))
?scatterplot3D
?scatterplot3d
install.packages("scatterplot3d")
library("scatterplot3d", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
with(outlier_SPA, {
scatterplot3d(Dim.1,
Dim.2,
Dim.3,
main = "SPA with Infered Location")
})
with(outlier_SPA, {
scatterplot3d(Dim.2,
Dim.1,
Dim.3,
main = "SPA with Infered Location")
})
